from pydantic import BaseModel
from typing import Optional, List
from typing_extensions import Literal
from models.bot import Bot
from openai.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall


class TokenUsage(BaseModel):
	completion_tokens: Optional[int]
	prompt_tokens: Optional[int]
	tokens: int


class Message(BaseModel):
	created_at: int
	by: str
	content: str
	token_usage: Optional[TokenUsage] = None
	

class Chat(BaseModel):
	id: Optional[str]
	bot: Bot
	created_at: int
	last_message: int
	messages: List[Message]
	model_context: Union[OpenAIContext, None]


class OpenAIContext(BaseModel):
	messages = List[OpenAIMessage]


class OpenAIMessage(BaseModel):
	role: Literal["system", "assitant", "tool", "user"]
	"""The role of the author of this message."""
	
	content: Optional[str]
	"""The contents of the message."""

	tool_calls: Optional[List[ChatCompletionMessageToolCall]] = None
	"""The tool calls generated by the model, such as function calls."""